import { defineStore } from 'pinia'
import { ref } from 'vue'
import type { Note, CreateNoteRequest, UpdateNoteRequest } from '@/types'
import { notesApi } from '@/services/api'

export const useNotesStore = defineStore('notes', () => {
  // State
  const notes = ref<Note[]>([])
  const loading = ref(false)
  const error = ref<string | null>(null)

  // Actions
  async function fetchNotes(): Promise<void> {
    try {
      loading.value = true
      error.value = null
      const fetchedNotes = await notesApi.getAll()
      
      // –û—Ç–ª–∞–¥–∫–∞: —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—à–ª–æ —Å —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üì• –î–∞–Ω–Ω—ã–µ —Å API:', fetchedNotes)
      console.log('üìä –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:', typeof fetchedNotes)
      console.log('üìã –Ø–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', Array.isArray(fetchedNotes))
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
      if (Array.isArray(fetchedNotes)) {
        const validNotes = fetchedNotes.filter((note) => note != null && note.id != null)
        console.log('‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏:', validNotes)
        notes.value = validNotes
      } else {
        console.warn('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', fetchedNotes)
        notes.value = []
      }
      
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∑–∞–º–µ—Ç–æ–∫:', notes.value.length)
    } catch (err: any) {
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–º–µ—Ç–æ–∫'
      console.error('‚ùå Error fetching notes:', err)
      notes.value = []
    } finally {
      loading.value = false
    }
  }

  async function createNote(data: CreateNoteRequest): Promise<Note> {
    try {
      loading.value = true
      error.value = null
      const newNote = await notesApi.create(data)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–º–µ—Ç–∫–∞ –≤–∞–ª–∏–¥–Ω–∞
      if (newNote && newNote.id != null) {
        notes.value.push(newNote)
      }
      return newNote
    } catch (err: any) {
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏'
      throw err
    } finally {
      loading.value = false
    }
  }

  async function updateNote(data: UpdateNoteRequest): Promise<void> {
    try {
      loading.value = true
      error.value = null
      await notesApi.update(data)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
      const index = notes.value.findIndex((n: Note) => n.id === data.id)
      if (index !== -1) {
        notes.value[index] = { ...notes.value[index], ...data }
      }
    } catch (err: any) {
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏'
      throw err
    } finally {
      loading.value = false
    }
  }

  async function deleteNote(id: number): Promise<void> {
    try {
      loading.value = true
      error.value = null
      await notesApi.delete(id)

      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è requestAnimationFrame –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
      requestAnimationFrame(() => {
        const index = notes.value.findIndex((n: Note) => n && n.id === id)
        if (index !== -1) {
          notes.value.splice(index, 1)
        }
      })
    } catch (err: any) {
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏'
      throw err
    } finally {
      loading.value = false
    }
  }

  async function exportToCsv(): Promise<void> {
    try {
      loading.value = true
      error.value = null
      const blob = await notesApi.exportToCsv()
      
      // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const url = window.URL.createObjectURL(blob)
      const link = document.createElement('a')
      link.href = url
      link.download = `notes_${new Date().toISOString().split('T')[0]}.csv`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      window.URL.revokeObjectURL(url)
    } catch (err: any) {
      error.value = err.response?.data?.message || '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞'
      throw err
    } finally {
      loading.value = false
    }
  }

  function clearError(): void {
    error.value = null
  }

  return {
    // State
    notes,
    loading,
    error,
    // Actions
    fetchNotes,
    createNote,
    updateNote,
    deleteNote,
    exportToCsv,
    clearError
  }
})

