import axios, { type AxiosInstance } from 'axios'
import type {
  LoginRequest,
  RegisterRequest,
  AuthResponse,
  Note,
  CreateNoteRequest,
  UpdateNoteRequest
} from '@/types'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
const API_BASE_URL = import.meta.env.VITE_API_URL || 'https://localhost:7135'
const IDENTITY_BASE_URL = import.meta.env.VITE_IDENTITY_URL || 'https://localhost:7200'

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è API
const apiClient: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
})

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä axios –¥–ª—è IdentityServer
const identityClient: AxiosInstance = axios.create({
  baseURL: IDENTITY_BASE_URL,
  headers: {
    'Content-Type': 'application/json'
  }
})

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∫ –∑–∞–ø—Ä–æ—Å–∞–º API
apiClient.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('auth_token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => Promise.reject(error)
)

// –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
apiClient.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω
      localStorage.removeItem('auth_token')
      localStorage.removeItem('user')
      window.location.href = '/login'
    }
    return Promise.reject(error)
  }
)

// API –º–µ—Ç–æ–¥—ã –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const authApi = {
  async login(data: LoginRequest): Promise<AuthResponse> {
    const response = await identityClient.post<AuthResponse>('/api/account/login', data)
    return response.data
  },

  async register(data: RegisterRequest): Promise<{ message: string }> {
    const response = await identityClient.post<{ message: string }>(
      '/api/account/register',
      data
    )
    return response.data
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ–±–µ—Ä—Ç–∫–∏ API –æ—Ç–≤–µ—Ç–∞
interface ApiResponseWrapper<T> {
  data?: T[]
  succeeded?: boolean
  message?: string | null
  statusCode?: number
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è OData –æ—Ç–≤–µ—Ç–∞
interface ODataResponse<T> {
  value?: T[]
  '@odata.context'?: string
}

// API –º–µ—Ç–æ–¥—ã –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
export const notesApi = {
  async getAll(): Promise<Note[]> {
    const response = await apiClient.get<Note[] | ApiResponseWrapper<Note> | ODataResponse<Note>>('/odata/Notes/GetAll')
    
    console.log('üåê –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API:', response.data)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–µ–º 'data' (–∫–∞—Å—Ç–æ–º–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞)
    if (response.data && typeof response.data === 'object' && 'data' in response.data) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–µ–º data, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ')
      const wrapped = response.data as ApiResponseWrapper<Note>
      return wrapped.data || []
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ OData (—Å –ø–æ–ª–µ–º 'value')
    if (response.data && typeof response.data === 'object' && 'value' in response.data) {
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω OData —Ñ–æ—Ä–º–∞—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º value')
      return (response.data as ODataResponse<Note>).value || []
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤
    if (Array.isArray(response.data)) {
      console.log('‚úÖ –û–±—ã—á–Ω—ã–π –º–∞—Å—Å–∏–≤')
      return response.data
    }
    
    console.warn('‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', response.data)
    return []
  },

  async getById(id: number): Promise<Note> {
    const response = await apiClient.get<Note | ApiResponseWrapper<Note>>(`/odata/Notes/GetById?noteId=${id}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–µ–º 'data'
    if (response.data && typeof response.data === 'object' && 'data' in response.data) {
      const wrapped = response.data as ApiResponseWrapper<Note>
      return wrapped.data?.[0] as Note
    }
    
    return response.data as Note
  },

  async create(data: CreateNoteRequest): Promise<Note> {
    const response = await apiClient.post<Note | ApiResponseWrapper<Note>>('/odata/Notes/Create', data)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å –ø–æ–ª–µ–º 'data'
    if (response.data && typeof response.data === 'object' && 'data' in response.data) {
      const wrapped = response.data as ApiResponseWrapper<Note>
      return wrapped.data?.[0] as Note
    }
    
    return response.data as Note
  },

  async update(data: UpdateNoteRequest): Promise<void> {
    await apiClient.put('/odata/Notes/Update', data)
  },

  async delete(id: number): Promise<void> {
    await apiClient.delete(`/odata/Notes/Delete?noteId=${id}`)
  },

  async exportToCsv(): Promise<Blob> {
    const response = await apiClient.get('/odata/Notes/ExportNotesToCsv', {
      responseType: 'blob'
    })
    return response.data
  }
}

export { apiClient, identityClient }

